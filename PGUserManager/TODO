This is the todo list for PGUserManager.
If you are interested in working on any of these, email p.gower@gmail.com

  (c) Copyright 2010 Paul Gower. All Rights Reserved. 

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

* General:
  - Figure out how to do read only properties, there are whole bunches of stuff that i dont want people to be able to change ever
  - use the results of the below tests to optimize all read operations
  - make sure all models have methods to retrieve all of their dependants
  - memcache stuff
  - setup some sort of profiling
  - add logging to everything
  - implement some way to hook into the existing authentication mechanism and create new identities for new users
  - do we play nice with openid?
  - check to make sure the email attribute passed to identity actually looks like an email address
  - when changing attributes on an identity get setattr to invalidate all dependent cache data
  - re-evaluate add_dependent and remove_dependent
  - would hashing all of the input args give better keys?
  - what happens when someone makes changes to the user data via the admin console (googles not mine)?
  - revist the membership_binding pre call hooks, their not efficient
  - rewrite identity __repr__ to deal with dynamic properties
  - hook into delete calls and make sure remove_dependants is called in that circumstance too

  
* Completed
  - DONE - add tests to make sure inactive identities are not returned in group operations
  - DONE - make all methods obey active status, except xx_query
  - DONE - Modify tests to be a bit more efficient
  - DONE - Integrate Identity active checking in all queries
    . Identities must be considered hidden when active is false
    . If groups dont return inactive members then there will be no way to get inactive group members, add a switch to get_identity to return inactive members, add a switch to get_members to return inactive members
  - DONE - make create_identity accept an unlimited number of kwarg arguments and then turn them into dynamic params on the identity
  
  
* Timeit Results
400 identities
db.get([i.key() for i in identity.identity_query()])
4.61978602409
4.79311990738
4.68706297874
4.87616991997
4.54648017883

db.get([k for k in identity.identity_query(keys_only=True)])
3.40176010132
3.44008708
3.51482892036
3.5808339119
3.35405778885

[i for i in identity.identity_query()]
2.3810839653
2.37036108971
2.44242405891
2.37455201149
2.38139295578